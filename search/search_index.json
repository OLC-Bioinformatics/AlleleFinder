{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"STEC AlleleFinder A suite of tools, written in Python, designed for the discovery, sequence typing, and profiling the stx alleles of Shiga toxin-producing E. coli Installation Detailed installation instructions are provided here Scripts There is a single STEC script with five separate functionalities: profile_reduce allele_translate_reduce allele_find aa_allele_find allele_split Feedback If you encounter any issues installing or running AlleleFinder, have feature requests, or need assistance, please open an issue on GitHub","title":"Home"},{"location":"#stec-allelefinder","text":"A suite of tools, written in Python, designed for the discovery, sequence typing, and profiling the stx alleles of Shiga toxin-producing E. coli","title":"STEC AlleleFinder"},{"location":"#installation","text":"Detailed installation instructions are provided here","title":"Installation"},{"location":"#scripts","text":"There is a single STEC script with five separate functionalities: profile_reduce allele_translate_reduce allele_find aa_allele_find allele_split","title":"Scripts"},{"location":"#feedback","text":"If you encounter any issues installing or running AlleleFinder, have feature requests, or need assistance, please open an issue on GitHub","title":"Feedback"},{"location":"aa_allele_find/","text":"Find alleles from amino query files This script performs BLAST analyses on an amino acid database prepared by allele_find against amino acid query sequences to find matching alleles. Updates allele database. Inputs amino acid query files in FASTA format. One query allele per file. Note that the allele naming scheme must match the outputs from the previous scripts amino acid allele database prepared by allele_translate_reduce or allele_find Running the script stec.py aa_allele_find --aa_alleles /path/to/aa_allele_folder -r /path/to/output_folder -q /path/to/query_folder An example with the amino acid alleles in the aa_alleles folder, the amino acid query files in the query folder, the desired reports folder reports , and a cutoff value of 100 (all in the current working directory): stec.py aa_allele_find --aa_alleles aa_alleles -q query -r reports -c 100 Usage usage: stec.py aa_allele_find [-h] [-version] [-v verbosity] [--aa_alleles aa_alleles] [-r report_path] [-q query_path] [-c cutoff] Analyse amino acid sequences to determine allele complement. Update profiles and databases. Keep notes optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. --aa_alleles aa_alleles Specify name and path of folder containing amino acid alleles. If not provided, the aa_allele folder in the current working directory will be used by default -r report_path, --report_path report_path Specify name and path of folder into which reports are to be placed. If not provided, the reports folder in the current working directory will be used -q query_path, --query_path query_path Specify name and path of folder containing query files in FASTA format. If not provided, the query folder in the current working directory will be used -c cutoff, --cutoff cutoff Specify the percent identity cutoff for matches. Allowed values are between 90 and 100. Default is 100 Outputs All amino acid allele files will be updated reports allele_report.tsv : TSV file containing results for each query. Includes sample name, matching allele(s), notes gene_name_filtered_alleles.fasta : FASTA-formatted text file containing all filtered query alleles gene_name_novel_alleles.fasta : FASTA-formatted text file containing all novel alleles","title":"Amino Acid Allele Finding"},{"location":"aa_allele_find/#find-alleles-from-amino-query-files","text":"This script performs BLAST analyses on an amino acid database prepared by allele_find against amino acid query sequences to find matching alleles. Updates allele database.","title":"Find alleles from amino query files"},{"location":"aa_allele_find/#inputs","text":"amino acid query files in FASTA format. One query allele per file. Note that the allele naming scheme must match the outputs from the previous scripts amino acid allele database prepared by allele_translate_reduce or allele_find","title":"Inputs"},{"location":"aa_allele_find/#running-the-script","text":"stec.py aa_allele_find --aa_alleles /path/to/aa_allele_folder -r /path/to/output_folder -q /path/to/query_folder An example with the amino acid alleles in the aa_alleles folder, the amino acid query files in the query folder, the desired reports folder reports , and a cutoff value of 100 (all in the current working directory): stec.py aa_allele_find --aa_alleles aa_alleles -q query -r reports -c 100","title":"Running the script"},{"location":"aa_allele_find/#usage","text":"usage: stec.py aa_allele_find [-h] [-version] [-v verbosity] [--aa_alleles aa_alleles] [-r report_path] [-q query_path] [-c cutoff] Analyse amino acid sequences to determine allele complement. Update profiles and databases. Keep notes optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. --aa_alleles aa_alleles Specify name and path of folder containing amino acid alleles. If not provided, the aa_allele folder in the current working directory will be used by default -r report_path, --report_path report_path Specify name and path of folder into which reports are to be placed. If not provided, the reports folder in the current working directory will be used -q query_path, --query_path query_path Specify name and path of folder containing query files in FASTA format. If not provided, the query folder in the current working directory will be used -c cutoff, --cutoff cutoff Specify the percent identity cutoff for matches. Allowed values are between 90 and 100. Default is 100","title":"Usage"},{"location":"aa_allele_find/#outputs","text":"All amino acid allele files will be updated reports allele_report.tsv : TSV file containing results for each query. Includes sample name, matching allele(s), notes gene_name_filtered_alleles.fasta : FASTA-formatted text file containing all filtered query alleles gene_name_novel_alleles.fasta : FASTA-formatted text file containing all novel alleles","title":"Outputs"},{"location":"allele_concatenate/","text":"Concatenate allele subunits This script concatenates allele subunits. The outputs from the STEC pipeline (by design) have separate STEC A and B subunits. This script concatenates the subunits ( stx1 : ECs2974/ECs2973 and stx2 : ECs1205/ECs1206) in the correct order with the appropriate linker sequence ( stx1 : 9 nt / 3 aa, stx2 : 12 nt / 4 aa). The linker is N for nucleotide and X for amino acid. Inputs nucleotide allele files prepare by allele_translate_reduce reduced profile file prepared by profile_reduce . Note that the allele files must contain sequence for the same genes that were used for the reduction of the profile, e.g.: ECs2973 ECs2974 Running the script stec.py allele_concatenate --nt_profile /path/to/nt_profile/profile.txt --aa_profile /path/to/aa_profile/profile.txt --nt_alleles /path/to/nt_alleles --aa_alleles /path/to/aa_alleles -c /path/to/outputs Usage usage: stec.py allele_concatenate [-h] [-version] [-v verbosity] [--nt_profile nt_profile] [--aa_profile aa_profile] [--nt_alleles nt_alleles] [--aa_alleles aa_alleles] [-c concatenate_path] Concatenate stx toxin subunit alleles with linkers optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. --nt_profile nt_profile Specify name and path of nucleotide profile file. If not provided, profile.txt in the nt_profile folder in the current working directory will be used by default --aa_profile aa_profile Specify name and path of amino acid profile file. If not provided, profile.txt in the aa_profile folder in the current working directory will be used by default --nt_alleles nt_alleles Specify name and path of folder containing nucleotide alleles. If not provided, the nt_allele folder in the current working directory will be used by default --aa_alleles aa_alleles Specify name and path of folder containing amino acid alleles. If not provided, the aa_allele folder in the current working directory will be used by default -c concatenate_path, --concatenate_path concatenate_path Specify name and path of folder into which concatenated subunit files are to be placed. If not provided, the concatenated_alleles folder in the current working directory will be used Outputs The concatenated alleles will be located in the provided concatenate_path . Nucleotide alleles will be in the nt subdirectory. Amino acid alleles will be in the aa subdirectory. Files are named based on the ordered alleles: stx1 : ECs2974_ECs2973.fasta , stx2 : ECs1205_ECs1206.fasta","title":"Allele Concatenating"},{"location":"allele_concatenate/#concatenate-allele-subunits","text":"This script concatenates allele subunits. The outputs from the STEC pipeline (by design) have separate STEC A and B subunits. This script concatenates the subunits ( stx1 : ECs2974/ECs2973 and stx2 : ECs1205/ECs1206) in the correct order with the appropriate linker sequence ( stx1 : 9 nt / 3 aa, stx2 : 12 nt / 4 aa). The linker is N for nucleotide and X for amino acid.","title":"Concatenate allele subunits"},{"location":"allele_concatenate/#inputs","text":"nucleotide allele files prepare by allele_translate_reduce reduced profile file prepared by profile_reduce . Note that the allele files must contain sequence for the same genes that were used for the reduction of the profile, e.g.: ECs2973 ECs2974","title":"Inputs"},{"location":"allele_concatenate/#running-the-script","text":"stec.py allele_concatenate --nt_profile /path/to/nt_profile/profile.txt --aa_profile /path/to/aa_profile/profile.txt --nt_alleles /path/to/nt_alleles --aa_alleles /path/to/aa_alleles -c /path/to/outputs","title":"Running the script"},{"location":"allele_concatenate/#usage","text":"usage: stec.py allele_concatenate [-h] [-version] [-v verbosity] [--nt_profile nt_profile] [--aa_profile aa_profile] [--nt_alleles nt_alleles] [--aa_alleles aa_alleles] [-c concatenate_path] Concatenate stx toxin subunit alleles with linkers optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. --nt_profile nt_profile Specify name and path of nucleotide profile file. If not provided, profile.txt in the nt_profile folder in the current working directory will be used by default --aa_profile aa_profile Specify name and path of amino acid profile file. If not provided, profile.txt in the aa_profile folder in the current working directory will be used by default --nt_alleles nt_alleles Specify name and path of folder containing nucleotide alleles. If not provided, the nt_allele folder in the current working directory will be used by default --aa_alleles aa_alleles Specify name and path of folder containing amino acid alleles. If not provided, the aa_allele folder in the current working directory will be used by default -c concatenate_path, --concatenate_path concatenate_path Specify name and path of folder into which concatenated subunit files are to be placed. If not provided, the concatenated_alleles folder in the current working directory will be used","title":"Usage"},{"location":"allele_concatenate/#outputs","text":"The concatenated alleles will be located in the provided concatenate_path . Nucleotide alleles will be in the nt subdirectory. Amino acid alleles will be in the aa subdirectory. Files are named based on the ordered alleles: stx1 : ECs2974_ECs2973.fasta , stx2 : ECs1205_ECs1206.fasta","title":"Outputs"},{"location":"allele_find/","text":"Find alleles This script performs BLAST analyses on a nucleotide allele database prepared by allele_translate_reduce against nucleotide query sequences to discover their sequence types. Updates nucleotide and amino acid profiles and allele databases Inputs nucleotide query files in FASTA format all outputs from allele_translate_reduce Running the script stec.py allele_find --nt_profile /path/to/nt_profile_file --aa_profile /path/to_aa_profile_file --nt_alleles /path/to/nt_allele_folder --aa_alleles /path/to/aa_allele_folder -r /path/to/output_folder -q /path/to/query_folder An example with the nucleotide profile file profile.txt in the nt_profile folder, the amino acid profile file profile.txt in the aa_profile folder, nucleotide alleles in the nt_alleles folder, the amino acid alleles in the nt_alleles folder, the query files in the query folder, and the desired output path for reports in the reports folder (all in the current working directory): stec.py allele_find --nt_profile nt_profile/profile.txt --aa_profile aa_profile/profile.txt --nt_alleles nt_alleles --aa_alleles aa_alleles -q query -r reports Please note that all those files and folders are the default values, so you can obtain the same command as follows: stec.py allele_find Usage usage: stec.py allele_find [-h] [-version] [-v verbosity] [--nt_profile nt_profile] [--aa_profile aa_profile] [--nt_alleles nt_alleles] [--aa_alleles aa_alleles] [-r report_path] [-q query_path] Analyse sequences to determine allele complement. Update profiles and databases. Keep notes optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. --nt_profile nt_profile Specify name and path of nucleotide profile file. If not provided, profile.txt in the nt_profile folder in the current working directory will be used by default --aa_profile aa_profile Specify name and path of amino acid profile file. If not provided, profile.txt in the aa_profile folder in the current working directory will be used by default --nt_alleles nt_alleles Specify name and path of folder containing nucleotide alleles. If not provided, the nt_allele folder in the current working directory will be used by default --aa_alleles aa_alleles Specify name and path of folder containing amino acid alleles. If not provided, the aa_allele folder in the current working directory will be used by default -r report_path, --report_path report_path Specify name and path of folder into which reports are to be placed. If not provided, the reports folder in the current working directory will be used -q query_path, --query_path query_path Specify name and path of folder containing query files in FASTA format. If not provided, the query folder in the current working directory will be used Outputs All outputs from allele_translate_reduce will be updated reports aa_novel_profiles.txt : text file containing all novel amino acid profiles generated from query sequences aa_gene_name_novel_alleles.fasta : FASTA-formatted text file containing all novel amino acid alleles from query sequences nt_novel_profiles.txt : text file containing all novel nucleotide profiles generated from query sequences nt_gene_name_novel_alleles.fasta : FASTA-formatted text file containing all novel nucleotide alleles from query sequences stec_report.tsv : TSV file containing results for each query. Includes sample name, nucleotide allele identifiers, nucleotide sequence type, amino acid allele identifiers, amino acid sequence type, and notes Additional information regarding this functionality is available in the allele_find documentation","title":"Allele Finding"},{"location":"allele_find/#find-alleles","text":"This script performs BLAST analyses on a nucleotide allele database prepared by allele_translate_reduce against nucleotide query sequences to discover their sequence types. Updates nucleotide and amino acid profiles and allele databases","title":"Find alleles"},{"location":"allele_find/#inputs","text":"nucleotide query files in FASTA format all outputs from allele_translate_reduce","title":"Inputs"},{"location":"allele_find/#running-the-script","text":"stec.py allele_find --nt_profile /path/to/nt_profile_file --aa_profile /path/to_aa_profile_file --nt_alleles /path/to/nt_allele_folder --aa_alleles /path/to/aa_allele_folder -r /path/to/output_folder -q /path/to/query_folder An example with the nucleotide profile file profile.txt in the nt_profile folder, the amino acid profile file profile.txt in the aa_profile folder, nucleotide alleles in the nt_alleles folder, the amino acid alleles in the nt_alleles folder, the query files in the query folder, and the desired output path for reports in the reports folder (all in the current working directory): stec.py allele_find --nt_profile nt_profile/profile.txt --aa_profile aa_profile/profile.txt --nt_alleles nt_alleles --aa_alleles aa_alleles -q query -r reports Please note that all those files and folders are the default values, so you can obtain the same command as follows: stec.py allele_find","title":"Running the script"},{"location":"allele_find/#usage","text":"usage: stec.py allele_find [-h] [-version] [-v verbosity] [--nt_profile nt_profile] [--aa_profile aa_profile] [--nt_alleles nt_alleles] [--aa_alleles aa_alleles] [-r report_path] [-q query_path] Analyse sequences to determine allele complement. Update profiles and databases. Keep notes optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. --nt_profile nt_profile Specify name and path of nucleotide profile file. If not provided, profile.txt in the nt_profile folder in the current working directory will be used by default --aa_profile aa_profile Specify name and path of amino acid profile file. If not provided, profile.txt in the aa_profile folder in the current working directory will be used by default --nt_alleles nt_alleles Specify name and path of folder containing nucleotide alleles. If not provided, the nt_allele folder in the current working directory will be used by default --aa_alleles aa_alleles Specify name and path of folder containing amino acid alleles. If not provided, the aa_allele folder in the current working directory will be used by default -r report_path, --report_path report_path Specify name and path of folder into which reports are to be placed. If not provided, the reports folder in the current working directory will be used -q query_path, --query_path query_path Specify name and path of folder containing query files in FASTA format. If not provided, the query folder in the current working directory will be used","title":"Usage"},{"location":"allele_find/#outputs","text":"All outputs from allele_translate_reduce will be updated reports aa_novel_profiles.txt : text file containing all novel amino acid profiles generated from query sequences aa_gene_name_novel_alleles.fasta : FASTA-formatted text file containing all novel amino acid alleles from query sequences nt_novel_profiles.txt : text file containing all novel nucleotide profiles generated from query sequences nt_gene_name_novel_alleles.fasta : FASTA-formatted text file containing all novel nucleotide alleles from query sequences stec_report.tsv : TSV file containing results for each query. Includes sample name, nucleotide allele identifiers, nucleotide sequence type, amino acid allele identifiers, amino acid sequence type, and notes Additional information regarding this functionality is available in the allele_find documentation","title":"Outputs"},{"location":"allele_split/","text":"Split allele database This script splits a single allele database file into multiple files; one sequence per file Inputs allele database file Running the script stec.py allele_split -q /path/to/query_folder -o /path/to_output_folder An example with the query files in the query folder, and the desired outputs in the split_alleles folder (all in the current working directory) Usage usage: stec.py allele_split [-h] [-version] [-v verbosity] [-q query_path] [-o output_path] Split combined allele files into individual files optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. -q query_path, --query_path query_path Specify name and path of folder containing query files in FASTA format. If not provided, the query folder in the current working directory will be used -o output_path, --output_path output_path Specify name and path of folder into which the split allele files are to be written. If not provided, the split_alleles folder in the current working directory will be used Outputs The provided output folder will contain all sequences in the provided database files, one per file Additional information regarding this functionality is available in the allele_split documentation","title":"Allele Splitting"},{"location":"allele_split/#split-allele-database","text":"This script splits a single allele database file into multiple files; one sequence per file","title":"Split allele database"},{"location":"allele_split/#inputs","text":"allele database file","title":"Inputs"},{"location":"allele_split/#running-the-script","text":"stec.py allele_split -q /path/to/query_folder -o /path/to_output_folder An example with the query files in the query folder, and the desired outputs in the split_alleles folder (all in the current working directory)","title":"Running the script"},{"location":"allele_split/#usage","text":"usage: stec.py allele_split [-h] [-version] [-v verbosity] [-q query_path] [-o output_path] Split combined allele files into individual files optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. -q query_path, --query_path query_path Specify name and path of folder containing query files in FASTA format. If not provided, the query folder in the current working directory will be used -o output_path, --output_path output_path Specify name and path of folder into which the split allele files are to be written. If not provided, the split_alleles folder in the current working directory will be used","title":"Usage"},{"location":"allele_split/#outputs","text":"The provided output folder will contain all sequences in the provided database files, one per file Additional information regarding this functionality is available in the allele_split documentation","title":"Outputs"},{"location":"allele_translate_reduce/","text":"Translate and reduce alleles This script translates allele files from Enterobase in nucleotide format to amino acid, performs content and length checks, and removes duplicates. In order for a translated allele to pass content and length checks, it must: Start with a Methionine residue Pass a minimum length threshold after trimming: The length thresholds are: ECs2973: 90 amino acid residues ECs2974: 316 amino acid residues ECs1205: 320 amino acid residues ECs1206: 88 amino acid residues Not be a duplicate of an allele already in the reduced database Inputs nucleotide allele files from Enterobase in FASTA format. Download instructions. reduced profile file prepared by profile_reduce . Note that the allele files must contain sequence for the same genes that were used for the reduction of the profile, e.g.: ECs2973 ECs2974 Running the script stec.py allele_translate_reduce -a /path/to/allele_folder -p /path/to/profile_file -r /path/to/output/folder/aa_profile -t /path/to/output/folder/aa_alleles An example with the nucleotide allele folder nt_alleles , the profile file profiles.txt in the nt_profile folder, the desired amino acid profile output folder aa_profile , and the desired amino acid allele output folder aa_alleles all in the current working directory: stec.py allele_translate_reduce -a nt_alleles -p nt_profile/profile.txt -r aa_profile -t aa_alleles Usage usage: stec.py allele_translate_reduce [-h] [-version] [-v verbosity] [-a allele_path] [-p profile_file] [-r report_path] [-t translated_path] Translate allele files in nucleotide format to amino acid. Remove duplicates. Keep notes optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. -a allele_path, --allele_path allele_path Specify name and path of folder containing allele files. If not provided, the nt_alleles folder in the current working directory will be used by default -p profile_file, --profile_file profile_file Optionally specify name and path of profile file. Parse the nucleic acid profile, and create the corresponding reduced amino acid profile -r report_path, --report_path report_path Specify the name and path of the folder into which outputs are to be placed. If not provided, the aa_profile folder in the current working directory will be used -t translated_path, --translated_path translated_path Specify the name and path of the folder into which alleles are to be placed. If not provided, the aa_alleles folder in the current working directory will be used Outputs These represent the folder structure of the directory containing the outputs aa_alleles notes gene_name_notes.txt : text file containing the nucleotide allele, the corresponding amino acid allele, and any notes (whether it is a duplicate, trimmed, or filtered) gene_name.fasta : FASTA-formatted text file containing sequences of all amino acid alleles that passed quality/content filters gene_name_filtered.txt : FASTA-formatted text file containing sequences of all amino acid alleles that failed quality/content filters aa_profile profile profile.txt : text file containing all unique amino acid profiles reducing_notes.txt : text file containing all amino acid sequence types, the sequence type following duplicate reduction, and any notes aa_full_profile.txt : text file containing all amino acid profiles before duplicate removal aa_nt_profile_links.tsv : TSV file containing every amino acid sequence type and the corresponding nucleotide sequence type(s) gene_names.txt : text file containing the extracted gene names from the analysis profile.txt : copy of profile.txt from the profile folder. Allows for allele discovery without manually moving the file nt_alleles gene_name.fasta : FASTA-formatted text file containing sequences of all nucleotide alleles that passed quality/content filters gene_name_filtered.txt : FASTA-formatted text file containing sequences of all nucleotide alleles that failed quality/content filters nt_profile profile.txt : text file containing all unique nucleotide profiles","title":"Allele Translation/Reduction"},{"location":"allele_translate_reduce/#translate-and-reduce-alleles","text":"This script translates allele files from Enterobase in nucleotide format to amino acid, performs content and length checks, and removes duplicates. In order for a translated allele to pass content and length checks, it must: Start with a Methionine residue Pass a minimum length threshold after trimming: The length thresholds are: ECs2973: 90 amino acid residues ECs2974: 316 amino acid residues ECs1205: 320 amino acid residues ECs1206: 88 amino acid residues Not be a duplicate of an allele already in the reduced database","title":"Translate and reduce alleles"},{"location":"allele_translate_reduce/#inputs","text":"nucleotide allele files from Enterobase in FASTA format. Download instructions. reduced profile file prepared by profile_reduce . Note that the allele files must contain sequence for the same genes that were used for the reduction of the profile, e.g.: ECs2973 ECs2974","title":"Inputs"},{"location":"allele_translate_reduce/#running-the-script","text":"stec.py allele_translate_reduce -a /path/to/allele_folder -p /path/to/profile_file -r /path/to/output/folder/aa_profile -t /path/to/output/folder/aa_alleles An example with the nucleotide allele folder nt_alleles , the profile file profiles.txt in the nt_profile folder, the desired amino acid profile output folder aa_profile , and the desired amino acid allele output folder aa_alleles all in the current working directory: stec.py allele_translate_reduce -a nt_alleles -p nt_profile/profile.txt -r aa_profile -t aa_alleles","title":"Running the script"},{"location":"allele_translate_reduce/#usage","text":"usage: stec.py allele_translate_reduce [-h] [-version] [-v verbosity] [-a allele_path] [-p profile_file] [-r report_path] [-t translated_path] Translate allele files in nucleotide format to amino acid. Remove duplicates. Keep notes optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. -a allele_path, --allele_path allele_path Specify name and path of folder containing allele files. If not provided, the nt_alleles folder in the current working directory will be used by default -p profile_file, --profile_file profile_file Optionally specify name and path of profile file. Parse the nucleic acid profile, and create the corresponding reduced amino acid profile -r report_path, --report_path report_path Specify the name and path of the folder into which outputs are to be placed. If not provided, the aa_profile folder in the current working directory will be used -t translated_path, --translated_path translated_path Specify the name and path of the folder into which alleles are to be placed. If not provided, the aa_alleles folder in the current working directory will be used","title":"Usage"},{"location":"allele_translate_reduce/#outputs","text":"These represent the folder structure of the directory containing the outputs aa_alleles notes gene_name_notes.txt : text file containing the nucleotide allele, the corresponding amino acid allele, and any notes (whether it is a duplicate, trimmed, or filtered) gene_name.fasta : FASTA-formatted text file containing sequences of all amino acid alleles that passed quality/content filters gene_name_filtered.txt : FASTA-formatted text file containing sequences of all amino acid alleles that failed quality/content filters aa_profile profile profile.txt : text file containing all unique amino acid profiles reducing_notes.txt : text file containing all amino acid sequence types, the sequence type following duplicate reduction, and any notes aa_full_profile.txt : text file containing all amino acid profiles before duplicate removal aa_nt_profile_links.tsv : TSV file containing every amino acid sequence type and the corresponding nucleotide sequence type(s) gene_names.txt : text file containing the extracted gene names from the analysis profile.txt : copy of profile.txt from the profile folder. Allows for allele discovery without manually moving the file nt_alleles gene_name.fasta : FASTA-formatted text file containing sequences of all nucleotide alleles that passed quality/content filters gene_name_filtered.txt : FASTA-formatted text file containing sequences of all nucleotide alleles that failed quality/content filters nt_profile profile.txt : text file containing all unique nucleotide profiles","title":"Outputs"},{"location":"downloads/","text":"Downloading profiles and alleles Here is my workflow for downloading the profile and allele files (this assumes that you have an Enterobase account): Navigate to the Enterobase Escherichia coli download page Download Profile Click Download ST profiles for scheme button Save to directory of your choice Extract profile from .gz archive Download Alleles Click the Filter/Clear Filters button Select Description from the drop-down menu Enter Shiga in the Contains text box Click Filter Click next to the top four entries (e.g. Locus tag ECs1205 (-) ) Click the Download alleles for selected loci button Save the files to the directory of your choice Extract alleles from .gz archives","title":"Downloads"},{"location":"downloads/#downloading-profiles-and-alleles","text":"Here is my workflow for downloading the profile and allele files (this assumes that you have an Enterobase account): Navigate to the Enterobase Escherichia coli download page","title":"Downloading profiles and alleles"},{"location":"downloads/#download-profile","text":"Click Download ST profiles for scheme button Save to directory of your choice Extract profile from .gz archive","title":"Download Profile"},{"location":"downloads/#download-alleles","text":"Click the Filter/Clear Filters button Select Description from the drop-down menu Enter Shiga in the Contains text box Click Filter Click next to the top four entries (e.g. Locus tag ECs1205 (-) ) Click the Download alleles for selected loci button Save the files to the directory of your choice Extract alleles from .gz archives","title":"Download Alleles"},{"location":"installation/","text":"Installation AlleleFinder is available as a conda package, so conda must be installed on your system. Conda Skip this step if you have already installed conda wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; bash miniconda.sh -b -p $HOME/miniconda conda update -q conda AlleleFinder You can now install the AlleleFinder package: I prefer to create a new conda environment and install the AlleleFinder in a single step: conda create -n allelefinder -c olc-bioinformatics allelefinder=0.1.2=py_0 If you wish to create an environment separately: conda create -n allelefinder python=3.9 You can now install AlleleFinder into this environment: conda activate allelefinder conda install -c olcbioinformatics allelefinder=0.1.2=py_0 Theoretically, if you don't have the ability to install conda for whatever reason, you can install the software with pip You'll need a virtual environment with Python 3.9 (start at the appropriate place in these directions depending on your setup): (if you don't have Python) sudo apt install python3 (if you don't have pip) sudo apt install python3-pip (if you don't have virtualenv) pip install virtualenv Create a Python 3.9 virtual environment: python3.9 -m venv allelefinder Activate the environment: source allelefinder/bin/activate Install AlleleFinder pip install allelefinder==0.1.2 You'll also need to install the dependencies pip install coloredlogs==15.0.1 pip install geneseekr==0.5.0 If you want to run tests, you'll also need to install the testing packages: pip install pytest==7.2.1 pip install pytest-cov==4.0.0 Tests If you encounter issues with the AlleleFinder package, tests are available to ensure that the installation was successful and the basic functionality is present. You will need to clone this repository and run the tests with pytest. Note: for whatever reason, you need to include the -s flag, or you will get an INTERNALERROR> OSError: [Errno 9] Bad file descriptor error git clone https://github.com/OLC-Bioinformatics/AlleleFinder.git cd AlleleFinder python -m pytest tests/ -s","title":"Installation"},{"location":"installation/#installation","text":"AlleleFinder is available as a conda package, so conda must be installed on your system.","title":"Installation"},{"location":"installation/#conda","text":"Skip this step if you have already installed conda wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; bash miniconda.sh -b -p $HOME/miniconda conda update -q conda","title":"Conda"},{"location":"installation/#allelefinder","text":"You can now install the AlleleFinder package: I prefer to create a new conda environment and install the AlleleFinder in a single step: conda create -n allelefinder -c olc-bioinformatics allelefinder=0.1.2=py_0 If you wish to create an environment separately: conda create -n allelefinder python=3.9 You can now install AlleleFinder into this environment: conda activate allelefinder conda install -c olcbioinformatics allelefinder=0.1.2=py_0 Theoretically, if you don't have the ability to install conda for whatever reason, you can install the software with pip You'll need a virtual environment with Python 3.9 (start at the appropriate place in these directions depending on your setup): (if you don't have Python) sudo apt install python3 (if you don't have pip) sudo apt install python3-pip (if you don't have virtualenv) pip install virtualenv Create a Python 3.9 virtual environment: python3.9 -m venv allelefinder Activate the environment: source allelefinder/bin/activate Install AlleleFinder pip install allelefinder==0.1.2 You'll also need to install the dependencies pip install coloredlogs==15.0.1 pip install geneseekr==0.5.0 If you want to run tests, you'll also need to install the testing packages: pip install pytest==7.2.1 pip install pytest-cov==4.0.0","title":"AlleleFinder"},{"location":"installation/#tests","text":"If you encounter issues with the AlleleFinder package, tests are available to ensure that the installation was successful and the basic functionality is present. You will need to clone this repository and run the tests with pytest. Note: for whatever reason, you need to include the -s flag, or you will get an INTERNALERROR> OSError: [Errno 9] Bad file descriptor error git clone https://github.com/OLC-Bioinformatics/AlleleFinder.git cd AlleleFinder python -m pytest tests/ -s","title":"Tests"},{"location":"profile_reduce/","text":"Reduce profiles This script reduces full wgMLST profile from Enterobase using genes of interest. The two stx genes, stx1 and stx2 , have the following identifiers in Enterobase: stx1 subunit A: ECs2974 stx1 subunit B: ECs2973 stx2 subunit A: ECs1205 stx2 subunit B: ECs1206 Inputs In order to extract all the unique profiles from a full Enterobase wgMLST profile for both stx1 subunits, create a text file containing the two identifiers (one per row) e.g.: genes.txt ECs2974 ECs2973 A full Escherichia wgMLST profile file from Enterobase is also required. Download instructions. Running the script stec.py profile_reduce -p /path/to/profile_file -g /path/to/genes_file -o /path/to/output_folder An example with the profile file, profiles.list in the profile folder, the genes file, genes.txt , in the genes folder, the reduced profile to be written to the nt_profile folder (all in the current working directory): stec.py profile_reduce -p profiles/profiles.list -g genes/genes.txt -o nt_profile Usage usage: stec.py profile_reduce [-h] [-version] [-v verbosity] [-p profile_file] [-g gene_names] [-o output_folder] Reduce full wgMLST profile from Enterobase using genes of interest optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. -p profile_file, --profile_file profile_file Specify name and path of profile file. If not provided, the default \"profiles.list\" in the current working directory will be used -g gene_names, --gene_names gene_names Name and path of text file containing gene names to use to filter the profile file (one per line). If not provided, the default \"genes.txt\" in the current working directory will be used. If the file does not exist, the program will attempt to create a file using the .fasta files in the current working directory -o output_folder, --output_folder output_folder Name and path of folder into which the reduced profile and notes are to be placed. If not provided, the default \"nt_profile\" folder in the current working directory will be used Outputs The reduced profile will be written to profile.txt in the supplied output folder. It contains all the unique profiles extracted from the full profile file A notes file will be written to reducing_notes.txt in the supplied output folder. It contains notes on every sequence type processed from the full profile. If a profile is a duplicate of a previous profile, the ReducedSequenceType will be 0 , and the Notes column will note that the profile is a duplicate","title":"Profile Reduction"},{"location":"profile_reduce/#reduce-profiles","text":"This script reduces full wgMLST profile from Enterobase using genes of interest. The two stx genes, stx1 and stx2 , have the following identifiers in Enterobase: stx1 subunit A: ECs2974 stx1 subunit B: ECs2973 stx2 subunit A: ECs1205 stx2 subunit B: ECs1206","title":"Reduce profiles"},{"location":"profile_reduce/#inputs","text":"In order to extract all the unique profiles from a full Enterobase wgMLST profile for both stx1 subunits, create a text file containing the two identifiers (one per row) e.g.: genes.txt ECs2974 ECs2973 A full Escherichia wgMLST profile file from Enterobase is also required. Download instructions.","title":"Inputs"},{"location":"profile_reduce/#running-the-script","text":"stec.py profile_reduce -p /path/to/profile_file -g /path/to/genes_file -o /path/to/output_folder An example with the profile file, profiles.list in the profile folder, the genes file, genes.txt , in the genes folder, the reduced profile to be written to the nt_profile folder (all in the current working directory): stec.py profile_reduce -p profiles/profiles.list -g genes/genes.txt -o nt_profile","title":"Running the script"},{"location":"profile_reduce/#usage","text":"usage: stec.py profile_reduce [-h] [-version] [-v verbosity] [-p profile_file] [-g gene_names] [-o output_folder] Reduce full wgMLST profile from Enterobase using genes of interest optional arguments: -h, --help show this help message and exit -version, --version show program's version number and exit -v verbosity, --verbosity verbosity Set the logging level. Options are debug, info, warning, error, and critical. Default is info. -p profile_file, --profile_file profile_file Specify name and path of profile file. If not provided, the default \"profiles.list\" in the current working directory will be used -g gene_names, --gene_names gene_names Name and path of text file containing gene names to use to filter the profile file (one per line). If not provided, the default \"genes.txt\" in the current working directory will be used. If the file does not exist, the program will attempt to create a file using the .fasta files in the current working directory -o output_folder, --output_folder output_folder Name and path of folder into which the reduced profile and notes are to be placed. If not provided, the default \"nt_profile\" folder in the current working directory will be used","title":"Usage"},{"location":"profile_reduce/#outputs","text":"The reduced profile will be written to profile.txt in the supplied output folder. It contains all the unique profiles extracted from the full profile file A notes file will be written to reducing_notes.txt in the supplied output folder. It contains notes on every sequence type processed from the full profile. If a profile is a duplicate of a previous profile, the ReducedSequenceType will be 0 , and the Notes column will note that the profile is a duplicate","title":"Outputs"}]}